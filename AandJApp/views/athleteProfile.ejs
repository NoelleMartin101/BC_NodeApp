<%- include partials/header.ejs %>
    <style>
        .mainTable {
            width: 900px;
            height: 600px;
            margin-left: auto;
            margin-right: auto;
            color: #26466D;
            background-color: #FFF;
            /*#ECC3BF;*/
        }

        table.SpaciousHalf {
            margin: 35px 50px;
            font-size: 10pt;
            background-color: transparent;
        }

        table.SpaciousHalf td {
            padding: 10px;
            vertical-align: top;
        }

        table.SpaciousHalf td p {
            padding: 10px;
        }

        .spaciousHalfTitleCell {
            width: 120px;
            background-color: transparent;
            padding-left: 5px;
            font-weight: bold;
        }
    </style>
    <form id="mainForm">
        <div class="container">
            <table class="SpaciousHalf">
                <tr>
                    <td class="spaciousHalfTitleCell">Name</td>
                    <td><input class="form-control" type="text" name="name" placeholder="Emma McQuaid" /></td>
                    <td rowspan="6">
                        <button class="btn btn-default" type="button"><a class="btn logInBtn"
                                href="/athleteBenchmarks">View Benchmarks </a></button><br /><br />
                        <button class="btn btn-default" type="button"><a class="btn logInBtn" href=""
                                onclick="connectMetamaskReg()">Register for Open </a></button><br /><br />
                        <button class="btn btn-default" type="button"><a class="btn logInBtn" href="/submitScore">Submit
                                Scores &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a></button><br /><br />
                        <button class="btn btn-default" type="button"><a class="btn logInBtn"
                                href="/events_current">View Event WODs </a></button><br /><br />
                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Date of Birth</td>
                    <td><input class="form-control" type="text" name="dob" placeholder="19/02/1992" /></td>

                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Sex</td>
                    <td><select class="form-control" width="50px" name="athleteSex" id="athleteSex" required>
                            <option value="">Please Select</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select></td>

                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Affiliate</td>
                    <td><input class="form-control" type="text" name="affiliate" placeholder="Sligo" /></td>
                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Height</td>
                    <td><input class="form-control" type="text" name="height" placeholder="162" /></td>
                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Global Ranking</td>
                    <td><input class="form-control" type="text" name="globalRanking" placeholder="12" /></td>
                </tr>
                <tr>
                    <td class="spaciousHalfTitleCell">Wallet ID</td>
                    <td colspan="2"><input class="form-control" type="text" name="walletID"
                            placeholder="0x3D1Ca9237122BA98464F6F27ff228a1030F366cd" /></td>
                </tr>
                <tr>
                    <td colspan="3">
                        <button class="btn btn-primary" type="button">
                            <i class="fa fa-save"></i>&nbsp;&nbsp;&nbsp;Save Updates
                        </button><br /><br />
                    </td>
                </tr>
            </table>
        </div>
    </form>
    <script>

        let account;
        const connectMetamaskReg = async () => {
            if (window.ethereum !== "underfined") {
                const accounts = await ethereum.request({ method: "eth_requestAccounts" });
                account = accounts[0];
                document.getElementById("userAreaRegister").innerHTML = `User Account: ${account}`;
            }
        }
        const connectContract = async () => {
            const ABI = [
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": false,
                            "internalType": "int256",
                            "name": "userID",
                            "type": "int256"
                        },
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "userName",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "int256",
                            "name": "competitionID",
                            "type": "int256"
                        },
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "date",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "uint256",
                            "name": "id",
                            "type": "uint256"
                        }
                    ],
                    "name": "RegistrationStored",
                    "type": "event"
                },
                {
                    "constant": true,
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "name": "competitionRegistrations",
                    "outputs": [
                        {
                            "internalType": "int256",
                            "name": "userID",
                            "type": "int256"
                        },
                        {
                            "internalType": "string",
                            "name": "userName",
                            "type": "string"
                        },
                        {
                            "internalType": "int256",
                            "name": "competitionID",
                            "type": "int256"
                        },
                        {
                            "internalType": "string",
                            "name": "date",
                            "type": "string"
                        }
                    ],
                    "payable": false,
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "constant": true,
                    "inputs": [],
                    "name": "registrationCount",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ],
                    "payable": false,
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "constant": true,
                    "inputs": [],
                    "name": "retrieveRegistration",
                    "outputs": [
                        {
                            "components": [
                                {
                                    "internalType": "int256",
                                    "name": "userID",
                                    "type": "int256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "userName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "int256",
                                    "name": "competitionID",
                                    "type": "int256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "date",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct ManageRegistrations.Registration[]",
                            "name": "",
                            "type": "tuple[]"
                        }
                    ],
                    "payable": false,
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "constant": false,
                    "inputs": [
                        {
                            "internalType": "int256",
                            "name": "_userID",
                            "type": "int256"
                        },
                        {
                            "internalType": "string",
                            "name": "_userName",
                            "type": "string"
                        },
                        {
                            "internalType": "int256",
                            "name": "_competitionID",
                            "type": "int256"
                        },
                        {
                            "internalType": "string",
                            "name": "_date",
                            "type": "string"
                        }
                    ],
                    "name": "storeRegistration",
                    "outputs": [],
                    "payable": false,
                    "stateMutability": "nonpayable",
                    "type": "function"
                }
            ];
            const Address = "0x2ce179De099818e1f1b0B9b4E35f49d4Ebe341a8";
            window.web3 = await new Web3(window.ethereum);
            window.contract = await new window.web3.eth.Contract(ABI, Address);
        }
        const registerforCompetition = async () => {
            const myRegistration = '1';
            await window.contract.methods.registerComp(myRegistration).send({ from: account });
            document.getElementById("userAreaRegister").innerHTML = `Congratulations!!! You are now registered for the Open`;
        }
    </script>
    <%- include partials/footer.ejs %>